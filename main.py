#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from load import bot, dp
from aiogram import types
from FormaAdmin import *
from keyboard import*
from database import*
from config import*
from Forma import*
import asyncio
from traits import*
import time
from FormaAdmin import*
from aiogram.types import InputMediaPhoto, InputMediaVideo


generator = Generator()
btn = Button()
db = Database()


@dp.callback_query_handler(lambda c: c.data == "buy_cinema")
async def process_buy_cinema(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    await bot.answer_callback_query(callback_query.id)
    
    await Forma.s1.set()

    await bot.send_message(
        callback_query.from_user.id,
        text="*“ö–∞–Ω—à–∞ –±–∏–ª–µ—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
        parse_mode="Markdown",
        reply_markup=btn.digits_and_cancel()
    ) 
  

@dp.message_handler(commands=['get_last_message'])
async def get_last_message_handler(message: types.Message):
    try:
        # Use the current chat ID from the message
        chat_id = message.chat.id

        # Fetch the chat details
        chat_info = await bot.get_chat(chat_id)

        # Fetch the most recent messages using bot.get_updates workaround
        updates = await bot.get_updates(limit=1000)

        # Extract message from the update
        if updates and updates[0].message:
            last_msg = updates[0].message
            last_message_id = last_msg.message_id
            last_message_text = last_msg.text or "<No text content>"

            # Send the message ID and text to the user
            await message.answer(
                f"Chat Title: {chat_info.title}\n"
                f"Message ID: {last_message_id}\n"
                f"Text: {last_message_text}"
            )
        else:
            await message.answer("No recent messages found in this chat.")

    except Exception as e:
        await message.answer(f"An error occurred: {e}")

@dp.message_handler(commands=['admin'])
async def handler(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

message_history = {
    800703982: {
        2: "Your last message here."
    }
}

user_message_history = {}

def store_message(user_id, message_id, text):
    if user_id not in user_message_history:
        user_message_history[user_id] = deque(maxlen=10)
    user_message_history[user_id].appendleft((message_id, text))

async def get_last_10_messages(user_id):
    return user_message_history.get(user_id, [])

@dp.message_handler(commands=['last'])
async def send_last_messages(message: types.Message):
    user_id = message.from_user.id
    last_messages = await get_last_10_messages(user_id)
    
    if last_messages:
        response = "\n".join([f"Message ID: {msg_id}, Text: {msg_text}" for msg_id, msg_text in last_messages])
    else:
        response = "No messages found."
    
    await bot.send_message(user_id, response)  
        
@dp.message_handler(commands=['start', 'go'])
async def start_handler(message: types.Message):
    print(message.from_user.id)
      
    from datetime import datetime
    fileId = "BAACAgIAAxkBAAERIkVnGN2qm8M1mZlZhdiTfTCtdyIcegACXlwAAvUYyUg19IavCYWf6TYE"

    user_id = message.from_user.id
    user_name = f"@{message.from_user.username}"
    time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    db.JustInsert(user_id, user_name, time_now)  
    
    if db.CheckUserPaid(message.from_user.id) == True:
        await bot.send_–º—à–≤—É—â(
            message.from_user.id,
            fileId,
            caption="""*–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º, –±“±–ª –º–µ–Ω—ñ“£ —è“ì–Ω–∏ –†–∞–º–∞–∑–∞–Ω –ê–º–∞–Ω—Ç–∞–π–¥—ã“£ ‚Äú–•–æ—Ç—è –±—ã –∫–∏–Ω–æ–¥–∞ 3‚Äù —Ñ–∏–ª—å–º—ñ–Ω –∂–æ“ì–∞—Ä“ì—ã —Å–∞–ø–∞–¥–∞ –∫”©—Ä—É—ñ“£—ñ–∑ “Ø—à—ñ–Ω –∞—à—ã–ª“ì–∞–Ω —Ä–µ—Å–º–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!‚úîÔ∏è

‚Äú–•–æ—Ç—è –±—ã –∫–∏–Ω–æ–¥–∞ 3‚Äù -  —Ñ–∏–ª—å–º—ñ–Ω –∫”©—Ä–≥–µ–Ω—ñ“£—ñ–∑ “Ø—à—ñ–Ω –ê–ª–º–∞—Ç—ã “õ–∞–ª–∞—Å—ã–Ω–∞–Ω 2 –±”©–ª–º–µ–ª—ñ –∫–∞–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å—Ç–∞“ì—ã –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—ã, 4 –∫”©–ª—ñ–∫—Ç—ñ –∂”ô–Ω–µ 50 –∞–¥–∞–º“ì–∞ 100 –º—ã“£ —Ç–µ“£–≥–µ–¥–µ–Ω —Å—ã–π–ª–∞–º–∞“õ—à—ã–º—ã–Ω! –ö–∏–Ω–æ–º–¥—ã –∫”©—Ä—É “Ø—à—ñ–Ω ‚Äú–ö–ò–ù–û–ù–´ –°–ê–¢–´–ü –ê–õ–£‚Äù –∫–Ω–æ–ø–∫–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑. 

–°”ô—Ç—Ç—ñ–ª—ñ–∫ –∂–æ–ª–¥–∞—Å—ã“£—ã–∑ –±–æ–ª—Å—ã–Ω, “õ–æ–ª–¥–∞—É –±—ñ–ª–¥—ñ—Ä—ñ–ø –∂–∞—Ç“õ–∞–Ω—ã“£—ã–∑“ì–∞ —Ä–∞—Ö–º–µ—Ç –∫”©—Ä–µ—Ä–º–µ–Ω—ñ–º!‚úäüèª*""",
            parse_mode="Markdown",
            protect_content=True,
            reply_markup=btn.menu(),
        )
        return

    await bot.send_photo(
        message.from_user.id,
        fileId,
        caption="""*–ê—Å—Å–∞–ª–∞—É–º–∞“ì–∞–ª–µ–π–∫—É–º, –±“±–ª –º–µ–Ω—ñ“£ —è“ì–Ω–∏ –†–∞–º–∞–∑–∞–Ω –ê–º–∞–Ω—Ç–∞–π–¥—ã“£ ‚Äú–•–æ—Ç—è –±—ã –∫–∏–Ω–æ–¥–∞ 3‚Äù —Ñ–∏–ª—å–º—ñ–Ω –∂–æ“ì–∞—Ä“ì—ã —Å–∞–ø–∞–¥–∞ –∫”©—Ä—É—ñ“£—ñ–∑ “Ø—à—ñ–Ω –∞—à—ã–ª“ì–∞–Ω —Ä–µ—Å–º–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç!‚úîÔ∏è

‚Äú–•–æ—Ç—è –±—ã –∫–∏–Ω–æ–¥–∞ 3‚Äù -  —Ñ–∏–ª—å–º—ñ–Ω –∫”©—Ä–≥–µ–Ω—ñ“£—ñ–∑ “Ø—à—ñ–Ω –ê–ª–º–∞—Ç—ã “õ–∞–ª–∞—Å—ã–Ω–∞–Ω 2 –±”©–ª–º–µ–ª—ñ –∫–∞–º—Ñ–æ—Ä—Ç –∫–ª–∞—Å—Å—Ç–∞“ì—ã –∫–≤–∞—Ä—Ç–∏—Ä–∞–Ω—ã, 4 –∫”©–ª—ñ–∫—Ç—ñ –∂”ô–Ω–µ 50 –∞–¥–∞–º“ì–∞ 100 –º—ã“£ —Ç–µ“£–≥–µ–¥–µ–Ω —Å—ã–π–ª–∞–º–∞“õ—à—ã–º—ã–Ω! –ö–∏–Ω–æ–º–¥—ã –∫”©—Ä—É “Ø—à—ñ–Ω ‚Äú–ö–ò–ù–û–ù–´ –°–ê–¢–´–ü –ê–õ–£‚Äù –∫–Ω–æ–ø–∫–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑. 

–°”ô—Ç—Ç—ñ–ª—ñ–∫ –∂–æ–ª–¥–∞—Å—ã“£—ã–∑ –±–æ–ª—Å—ã–Ω, “õ–æ–ª–¥–∞—É –±—ñ–ª–¥—ñ—Ä—ñ–ø –∂–∞—Ç“õ–∞–Ω—ã“£—ã–∑“ì–∞ —Ä–∞—Ö–º–µ—Ç –∫”©—Ä–µ—Ä–º–µ–Ω—ñ–º!‚úäüèª*""",        
        parse_mode="Markdown",
        protect_content=True,
        reply_markup=btn.buy_cinema(),
    )
    
             
@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO])
async def media_handler(message: types.Message, state: FSMContext):
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.content_type == 'photo':
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤–∏–¥–µ–æ
        file_id = message.video.file_id

    if file_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['file_id'] = file_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            message.from_user.id,
            text=f"*FileID: {data['file_id']}*",
            parse_mode="Markdown",
        )
    else:
        await bot.send_message(
            message.from_user.id,
            text="–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞.",
        )  

@dp.message_handler(Text(equals="üé• –ë–µ–π–Ω–µ –∫—É—Ä—Å—Ç–∞—Ä"), content_types=['text'])
async def handler(message: types.Message):

    file_id = "BAACAgIAAxkBAAIMsGYOfL6V-0jAR11JZUN9v2NrKV-8AALORQAC_NNxSKAE1UMhWlFeNAQ"     

    await bot.send_video(message.from_user.id, file_id, protect_content=True)

    await bot.send_message(
        message.from_user.id,
        text="""*–í–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏—è–ª–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑!\n –°“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã 5\n–°“±—Ä–∞“õ—Ç–∞—Ä 1 ...*""",
        parse_mode="Markdown",
        reply_markup=btn.cancel()
    ) 

@dp.message_handler(commands=['help'])
@dp.message_handler(Text(equals="üì≤ –ë–∞–π–ª–∞–Ω—ã—Å –Ω–æ–º–µ—Ä—ñ"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*https://wa.me/87086914391*""",
        parse_mode="Markdown",
    ) 

@dp.message_handler(Text(equals="üéû –ö–∏–Ω–æ –±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):
    
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        #file_id = "BAACAgIAAxkBAAHqn9lmzCTjZas-7lUDgSY-FAABVIBF21cAAjpVAAIxrGFKi6XARXI2nR41BA"
        #file_id = "BAACAgIAAxkBAAIBfmZVvFgHXNy6dEjDe2rDHuGlC3jrAALaTQAC1jOpSiMaJlO20CwKNQQ"
        first_cinema = "BAACAgIAAxkBAAHqn9lmzCTjZas-7lUDgSY-FAABVIBF21cAAjpVAAIxrGFKi6XARXI2nR41BA"
        second_cinema = "BAACAgIAAxkBASda6WcIS_yHWb_bwzZo5V4CeZmuv7q8AALMYAACk7FASPPlcDfP8X8pNgQ"   

        #user_ids = db.gatherC() 
        user_ids = [800703982, 6391833468]
        file_type = 'video'
        caption = """“ö“±—Ä–º–µ—Ç—Ç—ñ üéû  –∫–∏–Ω–æ —Å“Ø–π–µ—Ä “õ–∞—É—ã–º\n\n–°–∞–Ω–∞—É–ª—ã –∫“Ø–Ω–Ω–µ–Ω —Å–æ“£ —Å—ñ–∑–¥–µ—Ä–≥–µ —Å–∞—Ç—ã–ø –∞–ª“ì–∞–Ω –∫–∏–Ω–æ –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ“£ –∞—Ä–∞—Å—ã–Ω–∞–Ω Mercedes –∞–≤—Ç–æ üöô –∫”©–ª—ñ–∫ —Å—ã–π“ì–∞ –±–µ—Ä—ñ–ª–µ—Ç—ñ–Ω –±–æ–ª–∞–¥—ã –∂”ô–Ω–µ 15 –∞–¥–∞–º–Ω—ã“£ “õ–∞—Ä—ã–∑—ã–Ω –∂–∞—É—ã–ø –±–µ—Ä–µ—Ç—ñ–Ω –±–æ–ª–∞–º—ã–∑\n–ö–∏–Ω–æ –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ –∫”©—Ä—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ \nüßß “∞—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ–º - —Ç“Ø–π–º–µ—Å—ñ–Ω –±–∞—Å–∞ –æ—Ç—ã—Ä–∞ –∫”©—Ä–µ –∞–ª–∞—Å—ã–∑–¥–∞—Ä!\n\n–°—ã–π–ª—ã“õ—Ç—ã “±—Ç—ã–ø –∞–ª—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ–Ω –∞—Ä—Ç—Ç—ã—Ä—É “Ø—à—ñ–Ω \nüé¨ “ö–∞–π—Ç–∞–¥–∞–Ω –∫–∏–Ω–æ–Ω—ã - —Å–∞—Ç—ã–ø –∞–ª—É —Ç“Ø–π–º–µ—Å—ñ–Ω –±–∞—Å–∞ –æ—Ç—ã—Ä–∞ —Ç–∞“ì—ã–¥–∞ –∫–∏–Ω–æ –±–∏–ª–µ—Ç—ñ–Ω –∞–ª–∞ –∞–ª–∞—Å—ã–∑–¥–∞—Ä! –û“ì–∞–Ω –¥”ô–ª–µ–ª —Ä–µ—Ç—ñ–Ω–¥–µ –±—ñ—Ä—ñ–Ω—à—ñ –∫”©–ª—ñ–∫—Ç—ñ “±—Ç—ã–ø –∞–ª“ì–∞–Ω –ê—Ö–º–µ—Ç–æ–≤ “í–∞–ª—ã–º –¥”ô–ª–µ–ª 10 –±–∏–ª–µ—Ç –∞–ª“ì–∞–Ω\n\n–ö–∏–Ω–æ –±–∏–ª–µ—Ç—Ç–µ—Ä –±–∞—Ä–ª—ã“ì—ã –†–ê–ù–î–û–ú–ù–û –¢“Æ–†–î–ï –û–ô–ù–ê–¢–´–õ–ê–î–´ –Ø“í–ù–ò –°–ò–°–¢–ï–ú–ê ”®–ó–Ü –¢–ê“¢–î–ê–ô–î–´ ‚ùóÔ∏è"""

        successful, failed = await ForwardMessage(file_id, user_ids, file_type, caption)
        await bot.send_message(admin, text=f"–°”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {successful} “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞\n“ö–∞—Ç–µ–ª—ñ–∫ –±–æ–ª–¥—ã: {failed} “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞", reply_markup=btn.menu())
    


@dp.message_handler(Text(equals="üí∏ Money"), content_types=['text'])
async def handler(message: types.Message):
    
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        sum = db.get_money_sum()
        await bot.send_message(
                message.from_user.id,
                text="""*üí≥ –ñ–∞–ª–ø—ã “õ–∞—Ä–∞–∂–∞—Ç: %d*"""%sum,
                parse_mode="Markdown",
                reply_markup=btn.admin()
            )    

@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await FormaAdmin.s1.set()
        await bot.send_message(
                message.from_user.id,
                text="""*‚úèÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∏–ø—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑*""",
                parse_mode="Markdown",
                reply_markup=btn.typeMsg()
            )     


@dp.message_handler(Text(equals="üì® ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*@senior_coffee_drinker*\n\nhttps://wa.me/77086914391""",
        parse_mode="Markdown",
    ) 


@dp.message_handler(Text(equals="üé¨ “ö–∞–π—Ç–∞–¥–∞–Ω –∫–∏–Ω–æ–Ω—ã —Å–∞—Ç—ã–ø –∞–ª—É"), content_types=['text'])
async def handler(message: types.Message):
    
    await Forma.s1.set()
    await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –±–∏–ª–µ—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ üòâ?*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
    )

"""
# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF-—Ñ–∞–π–ª–∞
@dp.message_handler(content_types=types.ContentType.DOCUMENT, state='*')
async def pdf_received_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî —ç—Ç–æ PDF
    if message.document.mime_type == 'application/pdf':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Forma.s1
        await Forma.s1.set()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "“ö–∞–π—Ç–∞–¥–∞–Ω –∫–∏–Ω–æ–Ω—ã —Å–∞—Ç—ã–ø –∞–ª—É"
        await bot.send_message(
            message.from_user.id,
            text="*–ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω –∂“Ø–ª–¥–µ–Ω—ñ “±—Ç—É üìà —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã —Å–æ“ì—ã—Ä–ª—ã–º –∂–æ“ì–∞—Ä—ã üòâüëå*",
            parse_mode="Markdown",
        )
        await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –±–∏–ª–µ—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
        )
    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ PDF-—Ñ–∞–π–ª, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–¢–µ–∫, PDF —Ñ–∞–π–ª –∂—ñ–±–µ—Ä—É –∫–µ—Ä–µ–∫!")
    

"""
@dp.message_handler(Text(equals="üé¨ –ö–∏–Ω–æ–Ω—ã —Å–∞—Ç—ã–ø –∞–ª—É"), content_types=['text'])
async def handler(message: types.Message):
    
    await Forma.s1.set()
    await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –±–∏–ª–µ—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
    ) 
    

@dp.message_handler(Text(equals="üìë –õ–æ—Ç–æ"), content_types=['text'])
async def send_just_excel(message: types.Message):
    if message.from_user.id == admin:
        db.create_loto_excel('./excell/loto.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/loto.xlsx', 'rb'))

@dp.message_handler(Text(equals="üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã"), content_types=['text'])
async def send_client_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        db.create_client_excel('./excell/clients.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/clients.xlsx', 'rb'))

@dp.message_handler(Text(equals="üëá Just Clicked"), content_types=['text'])
async def send_loto_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        db.create_just_excel('./excell/just_users.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/just_users.xlsx', 'rb'))
    


@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*@senior_coffee_drinker*""",
        parse_mode="Markdown",
        reply_markup=btn.admin()
    ) 

@dp.message_handler(Text(equals="üßß “∞—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ–º"), content_types=['text'])
async def handler(message: types.Message):

    id_user = message.from_user.id            # Get the user ID from the message
    loto_ids = db.FetchIdLotoByUser(id_user)  # Fetch the list of id_loto for this user
    
    if loto_ids:
        ids_formatted = ", ".join(map(str, loto_ids))  # Format the list as a comma-separated string
        response_text = f"–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ“£ ID-–ª–∞—Ä—ã: {ids_formatted}"
    else:
        response_text = "–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—ñ“£—ñ–∑ –∂–æ“õ."

    await bot.send_message(
        message.from_user.id,
        text=response_text,
        parse_mode="Markdown",
        reply_markup=btn.menu()
    )


@dp.message_handler(commands=['cinema'])
@dp.message_handler(Text(equals="üéû Movie"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id == admin:
        cinema_capture = "AgACAgIAAxkBAAMDZwu5bJkie-LmBieNdYsb2WsAAbWhAAKC4zEbTBBYSKkYXEW7TWtIAQADAgADeQADNgQ"
        cinema = "BAACAgIAAxkBAAMlZwvK9ncWSMW-pm9U7dYOSBiKrEUAAuFdAAJMEGBIJf2Hf71qUTI2BA"

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        media = [
            InputMediaPhoto(
                media=cinema_capture,
                parse_mode="Markdown",
                protect_content=True
            ),
            InputMediaVideo(
                media=cinema,
                caption="*–•–æ—Ç—è –ë—ã –ö–∏–Ω–æ–¥–∞ 3*",  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
                parse_mode="Markdown",
                protect_content=True
            ),
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫–∞–∫ –∞–ª—å–±–æ–º
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media,
            protect_content=True
        )
        return

    if db.CheckUserPaid(message.from_user.id) == True:
        cinema_capture = "AgACAgIAAxkBAAMDZwu5bJkie-LmBieNdYsb2WsAAbWhAAKC4zEbTBBYSKkYXEW7TWtIAQADAgADeQADNgQ"
        cinema = "BAACAgIAAxkBAAMlZwvK9ncWSMW-pm9U7dYOSBiKrEUAAuFdAAJMEGBIJf2Hf71qUTI2BA"

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        media = [
            InputMediaPhoto(
                media=cinema_capture,
                parse_mode="Markdown",
                protect_content=True
            ),
            InputMediaVideo(
                media=cinema,
                caption="*–•–æ—Ç—è –ë—ã –ö–∏–Ω–æ–¥–∞ 3*",  # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
                parse_mode="Markdown",
                protect_content=True
            ),
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∫–∞–∫ –∞–ª—å–±–æ–º
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media,
            protect_content=True
        )
    
    
    
    await bot.send_message(
        message.from_user.id,
        text="–ö–∏–Ω–æ —Å–∞—Ç—ã–ø –∞–ª—ã“£—ã–∑.",
        reply_markup=btn.buy_cinema()
    )
    


@dp.message_handler(Text(equals="üéÅ –°—ã–π–ª—ã“õ—Ç–∞—Ä"), content_types=['text'])
async def handler(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await bot.send_message(
        message.from_user.id,
        text="üòä *üéÅ –°—ã–π–ª—ã“õ—Ç–∞—Ä*",
        parse_mode="Markdown",
        reply_markup=btn.gift()
    )

@dp.message_handler(Text(equals="üéÅ 1-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5) 


@dp.message_handler(Text(equals="üéÅ 2-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5) 

@dp.message_handler(Text(equals="üéÅ 3-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  

@dp.message_handler(Text(equals="üéÅ 4-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5) 

@dp.message_handler(Text(equals="üéÅ 5-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  

@dp.message_handler(Text(equals="üéÅ 6-—à—ã —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  

@dp.message_handler(Text(equals="üéÅ 7-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  



@dp.message_handler(Text(equals="üéÅ 8-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  


@dp.message_handler(Text(equals="üéÅ 9-—à—ã —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  

@dp.message_handler(Text(equals="üéÅ 10-—à—ã —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5) 

@dp.message_handler(Text(equals="‚óÄÔ∏è –ö–µ—Ä—ñ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id == admin or message.from_user.id == admin2:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

async def send_pdf_with_caption(user_id, id_loto, caption):
    loto_info = db.fetch_loto_by_id(id_loto)
    if not loto_info:
        await bot.send_message(user_id, text="PDF not found.")
        return

    receipt = loto_info[3]  # Adjusted index for receipt column
    pdf_path = f"/home/cinema/pdf/{receipt}"
    
    if os.path.exists(pdf_path):
        await bot.send_document(
            user_id,
            document=open(pdf_path, 'rb'),
            caption=caption,
            reply_markup=btn.gift()
        )
    else:
        await bot.send_message(user_id, text="PDF file not found.")



#
@dp.message_handler(Text(equals="üéÅ üöó –ö”©–ª—ñ–∫"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ üöó –ö”©–ª—ñ–∫\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)





